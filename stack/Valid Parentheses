bool isValid(string s) {
    // Map to store the matching pairs of brackets
    unordered_map<char, char> matchingBrackets = {
        {')', '('},
        {'}', '{'},
        {']', '['}
    };

    stack<char> st;

    // Traverse each character in the string
    for (char ch : s) {
        // If it's a closing bracket
        if (matchingBrackets.find(ch) != matchingBrackets.end()) {
            // If the stack is empty or the top of the stack doesn't match
            if (st.empty() || st.top() != matchingBrackets[ch]) {
                return false; // Invalid
            }
            // If it matches, pop the top of the stack
            st.pop();
        } else {
            // If it's an opening bracket, push it onto the stack
            st.push(ch);
        }
    }

    // If the stack is empty, all brackets matched properly
    return st.empty();
}

T.C=O(M*N)
S.C=O(N)
