  void preorder(TreeNode*root , int level , vector<int>&result)
  {
      if(!root){
         return ;
      }

      if(result.size()<level){
         result.push_back(root->val);
      }

      preorder(root->right , level+1 , result);
      preorder(root->left , level+1 , result);
  }
    vector<int> rightSideView(TreeNode* root) {
       
         vector<int>result ;
         preorder(root , 1 , result);

         return result;
    }
t.c=o(n)
s.c=o(n)

vector<int> rightSideView(TreeNode* root) {
          
        //       vector<int>ans;
        //   if(!root)  return  ans; 

        //   queue<TreeNode*>q;
        //   q.push(root);

        //   while(!q.empty())
        //   {
        //       int n = q.size();

        //       for(int i=0 ; i<n ; i++)
        //       {
        //          TreeNode*curr= q.front();
        //          q.pop();

        //          if(i==n-1)
        //          {
        //             ans.push_back(curr->val);
        //          }
                 

        //          if(curr->left) q.push(curr->left);
        //          if(curr->right) q.push(curr->right);
                 
        //       }
        //   }

        //   return ans;
}
